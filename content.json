{"meta":{"title":"Eleven's Blog","subtitle":null,"description":"Insist on learning some technology every day.","author":"Eleven","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2019-08-28T05:38:59.000Z","updated":"2019-08-28T05:39:59.284Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-08-28T05:35:05.000Z","updated":"2019-08-29T04:36:47.381Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"关于","date":"2019-08-28T09:25:25.000Z","updated":"2019-08-28T09:43:03.555Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"在校大学生记录学到的知识"}],"posts":[{"title":"AlexNet","slug":"AlexNet","date":"2019-12-07T08:27:19.000Z","updated":"2019-12-07T08:34:07.023Z","comments":true,"path":"2019/12/07/AlexNet/","link":"","permalink":"http://yoursite.com/2019/12/07/AlexNet/","excerpt":"","text":"2012年AlexNet在ImageNet大赛上一举夺魁，开启了深度学习的时代，虽然后来大量比AlexNet更快速更准确的卷积神经网络结构相继出现，但是AlexNet作为开创者依旧有着很多值得学习参考的地方，它为后续的CNN甚至是R-CNN等其他网络都定下了基调，所以下面我们将从AlexNet入手，理解卷积神经网络的一般结构。Alexnet网络是由八层网络组成的，包括5层卷积层和3层全连接层，下面是详细的介绍：第一层：Alexnet的输入部分是2242243的彩色图片，经过预处理之后，变为2272273的大小，作为网络的输入的部分。这个图像被96个大小规格为11 * 11 * 3的卷积核，进行特征提取，96个卷积核分成2组（因为采用了2个GPU服务器进行处理），每组48个卷积核；因此，卷积核在移动的过程中会生成(227-11)/4+1=55个像素，注意这里提取到的特征图是彩色的。这样得到了96个55 * 55大小的特征图了，并且是RGB通道的.96个卷积核分成2组，每组48个卷积核。对应生成2组55 * 55 * 48的卷积后的像素层数据。这些像素层经过relu1单元的处理，生成激活像素层，尺寸仍为2组55 * 55 * 48的像素层数据。这些像素层经过pool运算(最大池化)的处理，池化运算的尺度为3 * 3，stride移动的步长为2，则池化后图像的尺寸为(55-3)/2+1=27。 即池化后像素的规模为27 * 27 * 96；然后经过归一化处理，归一化运算的尺度为5 * 5；第一卷积层运算结束后形成的像素层的规模为27 *2 7 * 96。分别对应96个卷积核所运算形成。这96层像素层分为2组，每组48个像素层，每组在一个独立的GPU上进行运算。 第二层：输入数据为第一层输出的272796的像素层，为便于后续处理，每幅像素层的左右两边和上下两边都要填充2个像素；272796的像素数据分成272748的两组像素数据，两组数据分别再两个不同的GPU中进行运算，每组像素数据被5 * 5 * 48的卷积核进行卷积运算，卷积核对每组数据的每次卷积都生成一个新的像素。在卷积的过程中，因为步长是1个像素。因此，卷积核在移动的过程中会生成(27-5+2 * 2)/1+1=27个像素。共有256个5 * 5 * 48卷积核；这256个卷积核分成两组，每组针对一个GPU中的27 * 27 * 48的像素进行卷积运算。会生成两组27 * 27 * 128个卷积后的像素层。这些像素层经过relu2单元的处理，生成激活像素层，尺寸仍为两组27 * 27 * 128的像素层。这些像素层经过pool运算(最大池化)的处理，池化运算的尺度为3 * 3，运算的步长为2，则池化后图像的尺寸为(27-3)/2+1=13。 即池化后像素的规模为2组13 * 13 * 128的像素层。最后经过归一化处理，归一化运算的尺度为5 * 5；第二卷积层运算结束后形成的像素层的规模为2组13 * 13 * 128的像素层。第三层：第三层没有使用池化层，只有一个卷积层与另外一个激活函数。输入数据为第二层输出的2组13 * 13 * 128的像素层，为便于后续处理，每幅像素层的左右两边和上下两边都要填充1个像素；2组像素层数据都被送至2个不同的GPU中进行运算；因为在这里做了通道的合并，也就是一种串接操作，所以一个卷积核卷积的不再是单张显卡上的图像，而是两张显卡的图像串在一起之后的图像，串在一起之后的通道数就是256，所以卷积核的厚度为256，每个卷积核的尺寸是3 * 3 * 256，移动的步长是1个像素。运算后的卷积核的尺寸为(13-3+12)/1+1=13。2个GPU中共1313384个卷积后的像素层。这些像素层经过relu3单元的处理，生成激活像素层，尺寸仍为2组1313192像素层，共1313384个像素层。*第四层：没有使用池化层。输入数据为第三层输出的2组1313192的像素层；为便于后续处理，每幅像素层的左右两边和上下两边都要填充1个像素；2组像素层数据都被送至2个不同的GPU中进行运算。每个GPU中都有192个卷积核，共384个，每个卷积核的尺寸是33192。因此，运算后的卷积核的尺寸为(13-3+12)/1+1=13，2个GPU中共1313384个卷积后的像素层。这些像素层经过relu4单元的处理，生成激活像素层，尺寸仍为2组1313192像素层，共1313384个像素层。*第五层：输入数据为第四层输出的2组1313192的像素层；为便于后续处理，每幅像素层的左右两边和上下两边都要填充1个像素；2组像素层数据都被送至2个不同的GPU中进行运算。每个GPU中都有128个卷积核，每个卷积核的尺寸是33192。移动的步长是1个像素。因此，运算后的卷积核的尺寸为(13-3+12)/1+1=13。2个GPU中共1313256个卷积后的像素层。这些像素层经过relu5单元的处理，生成激活像素层，尺寸仍为2组1313128像素层，共1313256个像素层。2组1313128像素层分别在2个不同GPU中进行池化(pool)运算处理。池化运算的尺度为33，运算的步长为2，则池化后图像的尺寸为(13-3)/2+1=6。 即池化后像素的规模为两组66128的像素层数据，共66256规模的像素层数据。第六层：第五层输出的66256规模的像素层数据与第六层的4096个神经元进行全连接，然后经由relu6进行处理后生成4096个数据，再经过dropout6处理后输出4096个数据。第七层：第六层输出的4096个数据与第七层的4096个神经元进行全连接，然后经由relu7进行处理后生成4096个数据，再经过dropout7处理后输出4096个数据。第八层：第七层输出的4096个数据与第八层的1000个神经元进行全连接，经过训练后输出被训练的数值。 参考：https://blog.csdn.net/zyqdragon/article/details/72353420https://blog.csdn.net/chaipp0607/article/details/72847422","categories":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://yoursite.com/categories/Machine-Learning/"}],"tags":[]},{"title":"Neo4j","slug":"Neo4j","date":"2019-12-07T05:06:46.000Z","updated":"2019-12-07T08:34:06.410Z","comments":true,"path":"2019/12/07/Neo4j/","link":"","permalink":"http://yoursite.com/2019/12/07/Neo4j/","excerpt":"","text":"Neo4j简介Neo4j是一个高性能的,NOSQL图形数据库，它将结构化数据存储在网络上而不是表中。它是一个嵌入式的、基于磁盘的、具备完全的事务特性的Java持久化引擎，但是它将结构化数据存储在网络(从数学角度叫做图)上而不是表中。 Neo4j配置与启动首先需要下载neo4j-community-3.5.13-unix.tar.gz定位到文件所在位置，解压 tar -xf neo4j-community-3.5.13-unix.tar.gzmv neo4j-community-3.5.13-unix /home/hadoop/neo4j/home/hadoop/neo4j/bin/neo4j start打开浏览器输入：http://localhost:7474 Neo4j基础操作创建节点CREATE (&lt;node-name&gt;:&lt;label-name&gt;{ &lt;Property1-name&gt;:&lt;Property1-value&gt;...&lt;Propertyn-name&gt;:&lt;Propertyn-value&gt; }),...eg:CREATE (website:Demo{title:&#39;Code&#39;,begin:2019-10-1,end:2019-12-1}) 创建关系CREATE (&lt;node1-name&gt;:&lt;label1-name&gt;)-[(&lt;relationship-name&gt;:&lt;relationship-label-name&gt;)]-&gt;(&lt;node2-name&gt;:&lt;label2-name&gt;)eg:(Hong)-[:TASK_IN{roles:[&#39;boss&#39;]}]-&gt;(website) 获取有关节点与数据MATCH (&lt;node-name&gt;:&lt;label-name&gt;)单独使用无结果 返回结果RETURN &lt;node-name&gt;.&lt;Propertyn-name&gt;单独使用无结果 获取数据并返回结果eg:MATCH (a:Person)-[r:Person_Relate{detial: [&#39;classmate&#39;]}]-&gt;(b:Person) RETURN a,r,b创建节点与关系必须同时在一个命令行执行，否则需要MAtch先定位 ###实际例子 CREATE (website:Demo{title:’Code’,begin:2019-10-1,end:2019-12-1}), (Keanu:Person{name:’Keanu Reeves’,born:1994}), (Carrie:Person {name:’Carrie-Anne Moss’, born:1997}), (Laurence:Person {name:’Laurence Fishburne’, born:1999}), (Anndy:Person {name:’Andy Wachowski’, born:1995}), (Hong:Person{name:’Lan Hong’, born:1980}), (Hong)-[:TASK_IN{roles:[‘boss’]}]-&gt;(website), (Keanu)-[:TASK_IN{roles:[‘Front-end’]}]-&gt;(website), (Carrie)-[:TASK_IN{roles:[‘Back-end’]}]-&gt;(website), (Laurence)-[:TASK_IN{roles:[‘Front-end’]}]-&gt;(website), (Anndy)-[:TASK_IN{roles:[‘Back-end’]}]-&gt;(website), (Hong)-[:Person_Relate{detial:[‘Teacher and Student’]}]-&gt;(Keanu), (Hong)-[:Person_Relate{detial:[‘Teacher and Student’]}]-&gt;(Carrie), (Hong)-[:Person_Relate{detial:[‘Teacher and Student’]}]-&gt;(Laurence), (Hong)-[:Person_Relate{detial:[‘Teacher and Student’]}]-&gt;(Anndy), (Carrie)-[:Person_Relate{detial:[‘classmate’]}]-&gt;(Anndy), (Keanu)-[:Person_Relate{detial:[‘classmate’]}]-&gt;(Anndy) match (a) return a查找所有关系 match (a:Person)-[r:Person_Relate{detial:[‘classmate’]}]-&gt;(b:Person) return a,r,b 查找关系为’classmate’的节点 match (a:Person)-[r:TASK_IN{roles:[‘Front-end’]}]-&gt;(b:Demo) return a,r,b 查找在项目中负责前端任务的人 待续…","categories":[{"name":"Neo4j","slug":"Neo4j","permalink":"http://yoursite.com/categories/Neo4j/"}],"tags":[]},{"title":"Selenium框架","slug":"Selenium框架","date":"2019-11-24T06:10:29.000Z","updated":"2019-11-24T07:33:39.840Z","comments":true,"path":"2019/11/24/Selenium框架/","link":"","permalink":"http://yoursite.com/2019/11/24/Selenium框架/","excerpt":"","text":"SeleniumSelenium 是一款强大的基于浏览器的开源自动化测试工具，最初由Jason Huggins 于2004年在ThoughtWorks发起，它提供了一套简单易用的API，模拟浏览器的各种操作，方便各种Web应用的自动化测试。WebDriver通过调用浏览器提供的原生自动化API来驱动浏览器，解决了Selenium的很多疑难杂症。最终 Selenium 和 WebDriver 合并在一起，这就是 Selenium 2.0，有的地方也直接把它称作WebDriver。 selenium与chromedriver的下载cmd pip install selenium点击下载 chromedriver下载完路径放在环境变量上面的Path里面 界面化打开浏览器请求访问from selenium import webdriver driver = webdriver.Chrome() driver.get(detail_url) response = driver.page_source#获得页面源码 driver.quit()无界面化打开浏览器请求访问from selenium.webdriver.chrome.options import Options chrome_options = Options() chrome_options.add_argument(&quot;--proxy-server=http://{}&quot;.format(proxy)) #代理 chrome_options.add_argument(&apos;window-size=1920x3000&apos;) #指定浏览器分辨率 chrome_options.add_argument(&apos;--headless&apos;) #无界面化 chrome_options.add_argument(&apos;--disable-gpu&apos;) #谷歌文档提到需要加上这个属性来规避bug chrome_options.add_argument(&apos;blink-settings=imagesEnabled=false&apos;) #不加载图片, 提升速度 driver = webdriver.Chrome(chrome_options=chrome_options) driver.get(detail_url) response = driver.page_source driver.quit()定位页面元素单个元素find_element*多个元素find_elements* id复数定位find_elements_by_id() name复数定位find_elements_by_name() class复数定位find_elements_by_class_name() tag复数定位find_elements_by_tag_name() link复数定位find_elements_by_link_text() partial_link复数定位find_elements_by_partial_link_text() xpath复数定位find_elements_by_xpath() css复数定位find_elements_by_css_selector()eg:first_rows = driver.find_elements_by_css_selector(&quot;.aroundType li&quot;) 操作 from selenium.webdriver import ActionChain # 定位到某处并实现点击操作 ActionChains(driver).move_to_element(first_row).click().perform()#执行动作链actions.perform()","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[]},{"title":"LeetCode-75-颜色分类","slug":"LeetCode-75-颜色分类","date":"2019-11-17T05:47:21.000Z","updated":"2019-11-24T07:33:39.807Z","comments":true,"path":"2019/11/17/LeetCode-75-颜色分类/","link":"","permalink":"http://yoursite.com/2019/11/17/LeetCode-75-颜色分类/","excerpt":"","text":"75. 颜色分类(荷兰国旗问题) 思路：沿着数组移动 curr 指针，若nums[curr] = 0，则将其与 nums[p0]互换；若 nums[curr] = 2 ，则与 nums[p2]互换。 算法初始化0的最右边界：p0 = 0。在整个算法执行过程中 nums[idx &lt; p0] = 0. 初始化2的最左边界 ：p2 = n - 1。在整个算法执行过程中 nums[idx &gt; p2] = 2. 初始化当前考虑的元素序号 ：curr = 0. While curr &lt;= p2 : 若 nums[curr] = 0 ：交换第 curr个 和 第p0个 元素，并将指针都向右移。 若 nums[curr] = 2 ：交换第 curr个和第 p2个元素，并将 p2指针左移 。 若 nums[curr] = 1 ：将指针curr右移。 class Solution { public void sortColors(int[] nums) { int p0=0; int p2=nums.length-1; int current=0; int tmp; while(current&lt;=p2){ if(nums[current]==2){ tmp=nums[p2]; nums[p2]=nums[current]; p2--; nums[current]=tmp; } else if(nums[current]==0){ tmp=nums[p0]; nums[p0]=nums[current]; p0++; nums[current]=tmp; current++; } else current++; } } }","categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/categories/LeetCode/"}],"tags":[]},{"title":"LeetCode-73-矩阵置零","slug":"LeetCode-73-矩阵置零","date":"2019-11-11T12:34:46.000Z","updated":"2019-11-24T07:33:39.874Z","comments":true,"path":"2019/11/11/LeetCode-73-矩阵置零/","link":"","permalink":"http://yoursite.com/2019/11/11/LeetCode-73-矩阵置零/","excerpt":"","text":"73. 矩阵置零 方法一：遍历矩阵，如果有0出现，则遍历该行该列，对不是0的位置赋予一个标志符，最后再遍历矩阵，把标志符变成0；时间复杂度：O((M×N)×(M+N))空间复杂度：O(1)O(1) class Solution { public void setZeroes(int[][] matrix) { int n = matrix.length; int m = matrix[0].length; int tmp=-100000; for(int i=0;i&lt;n;i++){ for(int j=0;j&lt;m;j++){ if(matrix[i][j]==0){ for(int k=0;k&lt;n;k++){ if(matrix[k][j]!=0) matrix[k][j] = tmp; } for(int z=0;z&lt;m;z++){ if(matrix[i][z]!=0) matrix[i][z] = tmp; } } } } for(int i=0;i&lt;n;i++){ for(int j=0;j&lt;m;j++){ if(matrix[i][j]==tmp) matrix[i][j]=0; } } } }方法二：方法一不高效的地方在于我们会重复对同一行或者一列赋零。我们可以推迟对行和列赋零的操作。我们可以用每行和每列的第一个元素作为标记，这个标记用来表示这一行或者这一列是否需要赋零。这意味着对于每个节点不需要访问 M+N 个格子而是只需要对标记点的两个格子赋值。这些标签用于之后对矩阵的更新，如果某行的第一个元素为零就将整行置零，如果某列的第一个元素为零就将整列置零。class Solution { public void setZeroes(int[][] matrix) { int row = matrix.length; int col = matrix[0].length; boolean row0_flag = false; boolean col0_flag = false; // 第一行是否有零 for(int j = 0; j &lt; col; j++) { if(matrix[0][j] == 0) { row0_flag = true; break; } } // 第一列是否有零 for(int i = 0; i &lt; row; i++) { if(matrix[i][0] == 0) { col0_flag = true; break; } } // 把第一行第一列作为标志位 for(int i = 1; i &lt; row; i++) { for(int j = 1; j &lt; col; j++) { if(matrix[i][j] == 0) { matrix[i][0] = matrix[0][j] = 0; } } } // 置0 for(int i = 1; i &lt; row; i++) { for(int j = 1; j &lt; col; j++) { if(matrix[i][0] == 0 || matrix[0][j] == 0) { matrix[i][j] = 0; } } } if(row0_flag) { for(int j = 0; j &lt; col; j++) { matrix[0][j] = 0; } } if(col0_flag) { for(int i = 0; i &lt; row; i++) { matrix[i][0] = 0; } } } }","categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/categories/LeetCode/"}],"tags":[]},{"title":"LeetCode-69-x的平方根","slug":"LeetCode-69-x的平方根","date":"2019-11-11T11:59:13.000Z","updated":"2019-11-11T12:02:39.612Z","comments":true,"path":"2019/11/11/LeetCode-69-x的平方根/","link":"","permalink":"http://yoursite.com/2019/11/11/LeetCode-69-x的平方根/","excerpt":"","text":"69. x的平方根 思路：二分查找，所有的数都放在一起考虑，为了照顾到 00 把左边界设置为 00，为了照顾到 11 把右边界设置为 x // 2 + 1。 class Solution { public int mySqrt(int x) { long left=0; long right=x/2+1; while(left &lt; right){ long mid = left+(right-left+1)/2; long square = mid*mid; if(square &gt; x){ right = mid-1; } else{ left=mid; } } return (int)left; } }","categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/categories/LeetCode/"}],"tags":[]},{"title":"LeetCode-67-二进制求和","slug":"LeetCode-67-二进制求和","date":"2019-11-11T11:52:03.000Z","updated":"2019-11-11T11:58:20.545Z","comments":true,"path":"2019/11/11/LeetCode-67-二进制求和/","link":"","permalink":"http://yoursite.com/2019/11/11/LeetCode-67-二进制求和/","excerpt":"","text":"67. 二进制求和 class Solution { public String addBinary(String a, String b) { StringBuilder res = new StringBuilder(); int ca=0 ; for(int i=a.length()-1,j=b.length()-1;i&gt;=0||j&gt;=0;i--,j--){ int sum = ca; sum += (i&gt;=0? a.charAt(i)-&apos;0&apos;:0); sum += (j&gt;=0? b.charAt(j)-&apos;0&apos;:0); res.append(sum%2); ca = sum/2; } if(ca == 1) res.append(ca); return res.reverse().toString(); } }","categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/categories/LeetCode/"}],"tags":[]},{"title":"LeetCode-66-加一","slug":"LeetCode-66-加一","date":"2019-11-11T11:49:47.000Z","updated":"2019-11-11T11:51:13.831Z","comments":true,"path":"2019/11/11/LeetCode-66-加一/","link":"","permalink":"http://yoursite.com/2019/11/11/LeetCode-66-加一/","excerpt":"","text":"66. 加一 class Solution { public int[] plusOne(int[] digits) { int n = digits.length; for(int i=n-1;i&gt;=0;i--){ digits[i]++; digits[i] = digits[i] %10; if(digits[i] != 0) return digits; } digits = new int[digits.length + 1]; digits[0] = 1; return digits; } }","categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/categories/LeetCode/"}],"tags":[]},{"title":"LeetCode-62、63-不同路径I、II，64-最小路径和","slug":"LeetCode-62、63-不同路径I、II","date":"2019-10-19T08:31:28.000Z","updated":"2019-11-11T10:18:04.885Z","comments":true,"path":"2019/10/19/LeetCode-62、63-不同路径I、II/","link":"","permalink":"http://yoursite.com/2019/10/19/LeetCode-62、63-不同路径I、II/","excerpt":"","text":"62. 不同路径思路： 动态规划，每个格子可能的路径等于左边格子加上面的格子。注意，对于第一行或者第一列，由于都是在边界，所以只能为 1。优化：可以用一维数组进行优化，当前的状态只跟上一行的状态和同一行左边的状态有关。所以我们只需要维护上一行的数组，和当前行的数组。 二维数组class Solution { public int uniquePaths(int m, int n) { int[][] path = new int[m][n]; for(int i=0;i&lt;m;i++){ for(int j=0;j&lt;n;j++){ if(i == 0 || j == 0) path[i][j] = 1; else{ path[i][j]= path[i-1][j] + path[i][j-1]; } } } return path[m-1][n-1]; } }一维数组class Solution { public int uniquePaths(int m, int n) { int[] cur = new int[n]; Arrays.fill(cur,1); for (int i = 1; i &lt; m;i++){ for (int j = 1; j &lt; n; j++){ cur[j] += cur[j-1] ; } } return cur[n-1]; } }63. 不同路径 II思路： 因为这道题有了障碍物,所以我们有障碍物的地方到不了就设置为0,注意,针对第一行,或者第一列要重新设置,考虑障碍物的情况! class Solution { public int uniquePathsWithObstacles(int[][] obstacleGrid) { if(obstacleGrid == null) return 0; int m = obstacleGrid.length; int n = obstacleGrid[0].length; int[][] res = new int[m][n]; if(obstacleGrid[0][0] == 1) return 0; else res[0][0] = 1; for(int i=1;i&lt;n;i++){ if(obstacleGrid[0][i] != 1) res[0][i] = res[0][i-1]; } for(int j=1;j&lt;m;j++){ if(obstacleGrid[j][0] != 1) res[j][0] = res[j-1][0]; } for(int i=1;i&lt;m;i++){ for(int j=1;j&lt;n;j++){ if(obstacleGrid[i][j] != 1) res[i][j] = res[i][j-1]+res[i-1][j]; } } return res[m-1][n-1]; } }64. 最小路径和 class Solution { public int minPathSum(int[][] grid) { int m=grid.length; int n=grid[0].length; for(int i=0;i&lt;m;i++){ for(int j=0;j&lt;n;j++){ if(i==0&amp;&amp;j==0) continue; else if(i==0) grid[i][j] = grid[i][j] + grid[i][j-1]; else if(j==0) grid[i][j] = grid[i][j] + grid[i-1][j]; else grid[i][j] = Math.min(grid[i][j-1],grid[i-1][j]) + grid[i][j]; } } return grid[m-1][n-1]; } }","categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/categories/LeetCode/"}],"tags":[]},{"title":"Java 编写名为SimpleMap的类实现Map接口","slug":"Java-编写名为SimpleMap的类实现Map接口","date":"2019-10-17T02:42:30.000Z","updated":"2019-10-17T02:44:49.566Z","comments":true,"path":"2019/10/17/Java-编写名为SimpleMap的类实现Map接口/","link":"","permalink":"http://yoursite.com/2019/10/17/Java-编写名为SimpleMap的类实现Map接口/","excerpt":"","text":"import java.util.AbstractMap.SimpleEntry; import java.util.ArrayList; import java.util.Collection; import java.util.HashSet; import java.util.Iterator; import java.util.LinkedList; import java.util.List; import java.util.ListIterator; import java.util.Map; import java.util.Set; public class SimpleMap implements Map{ private int size = 0; private int SLOT; private LinkedList[] bucket=new LinkedList[SLOT]; @Override public int size() { return size; } @Override public boolean isEmpty() { if(size==0) return false; else return true; } @Override public boolean containsKey(Object key) { int index = key.hashCode() % SLOT;//查找在哪个槽 if(index&lt;0)//不能为负数 index=-index; if(bucket[index] != null) return false; LinkedList linkedList = bucket[index]; Iterator iterator = linkedList.iterator();//迭代器 while(iterator.hasNext()) { SimpleEntry entry = (SimpleEntry) iterator.next(); if(entry.getKey().equals(key)) return true; } return false; } @Override public boolean containsValue(Object value) { for(int i=0;i&lt;SLOT;i++) { if(bucket[i] != null) { LinkedList linkedList = bucket[i]; Iterator iterator = linkedList.iterator(); while(iterator.hasNext()) { SimpleEntry entry = (SimpleEntry) iterator.next(); if(entry.getKey().equals(value)) return true; } } } return false; } @Override public Object get(Object key) { int index = key.hashCode() % SLOT; if (index &lt; 0) index = -index; if (bucket[index] == null) return null; LinkedList linkedList = bucket[index]; Iterator iterator = linkedList.iterator(); while (iterator.hasNext()) { SimpleEntry entry = (SimpleEntry) iterator.next(); if (entry.getKey().equals(key)) { return entry.getValue(); } } return null; } @Override public Object put(Object key, Object value) { int index = key.hashCode() % SLOT; if (index &lt; 0) index = -index; SimpleEntry entry = new SimpleEntry(key, value); Object prev = null; if (bucket[index] == null) bucket[index] = new LinkedList(); LinkedList list = bucket[index]; boolean found = false; ListIterator iterator = list.listIterator(); while (iterator.hasNext()) { SimpleEntry simpleEntry = (SimpleEntry) iterator.next(); if (simpleEntry.equals(entry)) {//一对一 found = true; prev = simpleEntry.getValue(); iterator.set(entry); break; } } if (!found) { size++; bucket[index].add(entry); } return prev; } @Override public Object remove(Object key) { SimpleEntry entry = null; int index = key.hashCode() % SLOT; if (index &lt; 0) index = -index; if (bucket[index] == null) return null; LinkedList linkedList = bucket[index]; Iterator iterator = linkedList.iterator(); while (iterator.hasNext()) { SimpleEntry simpleEntry = (SimpleEntry) iterator.next(); if (simpleEntry.getKey().equals(key)) { entry = simpleEntry; iterator.remove(); size--; break; } } return entry; } @Override public void putAll(Map m) { Set set = m.entrySet(); for (Object object : set) { Map.Entry oo = (Map.Entry) object; put(oo.getKey(), oo.getValue()); } } @Override public void clear() { for (Object key : keySet()) { remove(key); } size = 0; } @Override public Set keySet() { Set set = new HashSet(); for (int i = 0; i &lt; SLOT; i++) { if (bucket[i] != null) { Iterator iterator = bucket[i].iterator(); while (iterator.hasNext()) { set.add(((SimpleEntry) iterator.next()).getKey()); } } } return set; } @Override public Collection values() { List list = new ArrayList(); for (int i = 0; i &lt; SLOT; i++) { if (bucket[i] != null) { Iterator iterator = bucket[i].iterator(); while (iterator.hasNext()) { list.add(((SimpleEntry) iterator.next()).getValue()); } } } return list; } @Override public Set&lt;Entry&gt; entrySet() { Set set = new HashSet(); for (int i = 0; i &lt; SLOT; i++) { if (bucket[i] != null) { Iterator iterator = bucket[i].iterator(); while (iterator.hasNext()) { set.add(((SimpleEntry) iterator.next())); } } } return set; } }","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[]},{"title":"LeetCode-61-旋转链表","slug":"LeetCode-61-旋转链表","date":"2019-10-07T07:10:23.000Z","updated":"2019-10-07T07:16:44.103Z","comments":true,"path":"2019/10/07/LeetCode-61-旋转链表/","link":"","permalink":"http://yoursite.com/2019/10/07/LeetCode-61-旋转链表/","excerpt":"","text":"/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode rotateRight(ListNode head, int k) { if(head == null || head.next == null) return head; int length = 1; ListNode old_tail = head; while(old_tail.next != null){//计算链表带数字的长度 length++; old_tail = old_tail.next; } old_tail.next = head;//构成环 ListNode new_tail = head; // 新的尾部 : (n - k % n - 1)th node // 新的头部 : (n - k % n)th node for(int i = 0;i&lt;length-k%length-1;i++){ new_tail = new_tail.next; } ListNode new_head = new_tail.next; new_tail.next = null;//断开环形成单链表 return new_head; } }","categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/categories/LeetCode/"}],"tags":[]},{"title":"Java 遍历字符串String","slug":"Java-遍历字符串String","date":"2019-10-04T06:35:57.000Z","updated":"2019-10-04T06:41:12.874Z","comments":true,"path":"2019/10/04/Java-遍历字符串String/","link":"","permalink":"http://yoursite.com/2019/10/04/Java-遍历字符串String/","excerpt":"","text":"Method One String str = &quot;The Lakers are Champions&quot;; for (int i = 0, n = str.length(); i &lt; n; i++) { char c = str.charAt(i); } Method Two char[] chars = str.toCharArray(); for (int i = 0, n = chars.length; i &lt; n; i++) { char c = chars[i]; }","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[]},{"title":"Python 线程池","slug":"Python-线程池","date":"2019-09-23T12:06:31.000Z","updated":"2019-09-23T12:30:44.150Z","comments":true,"path":"2019/09/23/Python-线程池/","link":"","permalink":"http://yoursite.com/2019/09/23/Python-线程池/","excerpt":"","text":"线程池的原理系统启动一个新线程的成本是比较高的，因为它涉及与操作系统的交互。在这种情形下，使用线程池可以很好地提升性能，尤其是当程序中需要创建大量生存期很短暂的线程时，更应该考虑使用线程池。 线程池在系统启动时即创建大量空闲的线程，程序只要将一个函数提交给线程池，线程池就会启动一个空闲的线程来执行它。当该函数执行结束后，该线程并不会死亡，而是再次返回到线程池中变成空闲状态，等待执行下一个函数。 此外，使用线程池可以有效地控制系统中并发线程的数量。当系统中包含有大量的并发线程时，会导致系统性能急剧下降，甚至导致 Python 解释器崩溃，而线程池的最大线程数参数可以控制系统中并发线程的数量不超过此数。 线程池的使用使用线程池来执行线程任务的步骤如下： ①调用 ThreadPoolExecutor 类的构造器创建一个线程池。 ②定义一个普通函数作为线程任务。 ③调用 ThreadPoolExecutor 对象的 submit() 方法来提交线程任务。 ④当不想提交任何任务时，调用 ThreadPoolExecutor 对象的 shutdown() 方法来关闭线程池。 回调函数p.submit(这里异步调用).add_done_callback(回调函数)当线程任务完成后，程序会自动触发回调函数，回调函数会获得线程任务的返回值作为参数。在回调函数里，传进来的参数需要用.result()得到结果。 例子from concurrent.futures import ThreadPoolExecutor # 进程池模块 p = ThreadPoolExecutor(30) for page_url in page_url_list: p.submit(get_detail_page_url, page_url).add_done_callback(detail_page_parser) # 这里的回调函数拿到的是一个对象。 # 先把返回的res得到一个结果。即在前面加上一个res.result(),这个结果就是get_detail_page_url的返回 p.shutdown() #shutdown() 方法，该方法将启动线程池的关闭序列。调用 shutdown() 方法后的线程池不再接收新任务，但会将以前所有的已提交任务执行完成。 #当线程池中的所有任务都执行完成后，该线程池中的所有线程都会死亡。","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[]},{"title":"LeetCode 56.合并区间","slug":"LeetCode-56-合并区间","date":"2019-09-16T07:44:05.000Z","updated":"2019-09-16T09:51:01.381Z","comments":true,"path":"2019/09/16/LeetCode-56-合并区间/","link":"","permalink":"http://yoursite.com/2019/09/16/LeetCode-56-合并区间/","excerpt":"","text":"class Solution { public int[][] merge(int[][] intervals) { List&lt;int[]&gt; res = new ArrayList&lt;&gt;(); if(intervals.length == 0 || intervals == null) return res.toArray(new int[0][]); Arrays.sort(intervals, (a, b) -&gt; a[0] - b[0]); int start = intervals[0][0]; int end = intervals[0][1]; for(int[] interval:intervals){ if(interval[0] &lt;= end){ end = Math.max(end, interval[1]); }else{ res.add(new int[]{start, end}); start = interval[0]; end = interval[1]; } } res.add(new int[]{start, end}); return res.toArray(new int[0][]); } }修改Arrays.sortclass Solution { public int[][] merge(int[][] intervals) { List&lt;int[]&gt; res = new ArrayList&lt;&gt;(); if(intervals.length == 0 || intervals == null) return res.toArray(new int[0][]); Arrays.sort(intervals, new Comparator&lt;int[]&gt;() { @Override public int compare(int[] o1, int[] o2) { // TODO Auto-generated method stub return o1[0] - o2[0]; } }); int start = intervals[0][0]; int end = intervals[0][1]; for(int[] interval:intervals){ if(interval[0] &lt;= end){ end = Math.max(end, interval[1]); }else{ res.add(new int[]{start, end}); start = interval[0]; end = interval[1]; } } res.add(new int[]{start, end}); return res.toArray(new int[0][]); } }","categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/categories/LeetCode/"}],"tags":[]},{"title":"Java 反射：框架设计的灵魂","slug":"Java-反射","date":"2019-09-08T14:42:16.000Z","updated":"2019-09-09T05:44:31.543Z","comments":true,"path":"2019/09/08/Java-反射/","link":"","permalink":"http://yoursite.com/2019/09/08/Java-反射/","excerpt":"","text":"反射：框架设计的灵魂框架：半成品软件。可以在框架的基础上进行软件开发，简化编码。反射：将类的各个组件部分封装为其他对象好处：①可以在程序运行过程中，操作这些对象 ②可以解耦，提高程序的可扩展性 Java代码经历的三阶段：Source源代码阶段——&gt;Class类对象阶段——&gt;Runtime运行时阶段 获取Class对象的方法：1.Class.forName(“全类名”)：将字节码文件加载进内存，返回Class对象 * 多用于配置文件，将类名定义咋配置文件中。读取文件，加载类2.类名.class：通过类名的属性class获取 * 多用于参数的传递3.对象.getClass():getClass()方法在Object类中定义着。 * 多用于对象的获取字节码的方式 结论： 同一个字节码文件（*.class）在一次程序运行过程中，只会被加载一次，不论通过哪一种方法获取的Class对象都是同一个。 Class对象功能： * 获取功能： 1. 获取成员变量们 * Field[] getFields() ：获取所有public修饰的成员变量 * Field getField(String name) 获取指定名称的 public修饰的成员变量 * Field[] getDeclaredFields() 获取所有的成员变量，不考虑修饰符 * Field getDeclaredField(String name) 2. 获取构造方法们 * Constructor&lt;?&gt;[] getConstructors() * Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes) * Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes) * Constructor&lt;?&gt;[] getDeclaredConstructors() 3. 获取成员方法们： * Method[] getMethods() * Method getMethod(String name, 类&lt;?&gt;... parameterTypes) * Method[] getDeclaredMethods() * Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes) 4. 获取全类名 * String getName() * Field：成员变量 * 操作： 1. 设置值 * void set(Object obj, Object value) 2. 获取值 * get(Object obj) 3. 忽略访问权限修饰符的安全检查 * setAccessible(true):暴力反射 * Constructor:构造方法 * 创建对象： * T newInstance(Object... initargs) * 如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法 * Method：方法对象 * 执行方法： * Object invoke(Object obj, Object... args) * 获取方法名称： * String getName:获取方法名","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[]},{"title":"Java input and inputMismatchException","slug":"Java-input-and-inputMismatchException","date":"2019-09-04T04:27:43.000Z","updated":"2019-09-04T04:47:56.945Z","comments":true,"path":"2019/09/04/Java-input-and-inputMismatchException/","link":"","permalink":"http://yoursite.com/2019/09/04/Java-input-and-inputMismatchException/","excerpt":"","text":"Java从控制台输入常用方法之一：import java.util.Scanner;Scanner scan = new Scanner(System.in);int a = scan.nextInt();String b = scan.nextLine();float c = scan.nextFloat(); 出现inputMismatchException：说明可能输入值与变量声明的数据类型不符合","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[]},{"title":"git出现仓库间差异时，可以强推","slug":"git出现仓库间差异时，可以强推","date":"2019-09-03T00:41:06.000Z","updated":"2019-09-04T04:47:56.954Z","comments":true,"path":"2019/09/03/git出现仓库间差异时，可以强推/","link":"","permalink":"http://yoursite.com/2019/09/03/git出现仓库间差异时，可以强推/","excerpt":"","text":"git push -f origin master目前还不知道有什么弊端","categories":[{"name":"git","slug":"git","permalink":"http://yoursite.com/categories/git/"}],"tags":[]},{"title":"使用git将本地仓库推送到GitHub仓库","slug":"用git将本地仓库推送到GitHub仓库","date":"2019-08-29T04:08:29.000Z","updated":"2019-08-29T04:36:33.119Z","comments":true,"path":"2019/08/29/用git将本地仓库推送到GitHub仓库/","link":"","permalink":"http://yoursite.com/2019/08/29/用git将本地仓库推送到GitHub仓库/","excerpt":"","text":"创建本地仓库mkdir filenamecd filename 初始化仓库git init然后打开仓库所在的文件夹对文件进行操作 将文件推送本地仓库git status此时会列出带红色的文件名git add 文件名git commit -m &quot;描述&quot;git status提示nothing to commit, working tree clean说明已经没有文件在暂存区和工作区了 推送到远程仓库先到GitHub上创建一个新仓库,复制仓库地址git remote add origin 仓库地址git pull --rebase origin master这一步是为了本地仓库同步远程仓库的README.mdgit push -u origin master第一次推送 对文件修改后，再次推送到远程仓库git statusgit add filenamegit commit -m &quot;描述&quot;git statusgit push origin master推送成功","categories":[{"name":"git","slug":"git","permalink":"http://yoursite.com/categories/git/"}],"tags":[]},{"title":"搭建hexo，部署到GitHub仓库","slug":"搭建hexo，部署到GitHub仓库","date":"2019-08-27T13:48:10.000Z","updated":"2019-08-29T03:43:29.846Z","comments":true,"path":"2019/08/27/搭建hexo，部署到GitHub仓库/","link":"","permalink":"http://yoursite.com/2019/08/27/搭建hexo，部署到GitHub仓库/","excerpt":"","text":"首先下载node.js点击进入：https://nodejs.org/en/检查是否下载成功 接着安装hexo博客框架安装hexo博客框架，需要借助npm包管理器来安装，国内镜像安装比较慢，先用npm下载cnpm，就是淘宝源，利用淘宝源来安装加快下载速度。检查是否下载成功接下来利用cnpm安装hexo框架检查是否安装成功 初始化hexo博客查看路径创建一个新文件夹然后进入该路径初始化博客查看blog文件夹，是否下载成功启动博客在浏览器访问一下，访问成功，说明博客已经在本地成功搭建创建一篇博客，先关闭博客。查看路径下的文件对于博客内容，可以在文件夹里用typora打开编辑，然后保存刷新即可。接着清理生成再次启动博客刷新浏览器页面就可以看到你刚刚的那篇博文 将博客部署到远端，使别人能访问在blog目录下装一个git部署插件接下来对blog文件夹里的_config.yml进行添加说明，可以选择用文本打开，滚到最底部，将deploy下面的内容补上去，每一行开头前两个空格，冒号后面一个空格，repo是你仓库的地址。保存退出，接着部署到远端中间需要输入你GitHub的账户密码接下来就可以根据你的仓库名（name.github.io）访问你的博客了","categories":[],"tags":[]}]}