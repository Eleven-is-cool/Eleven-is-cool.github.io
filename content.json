{"meta":{"title":"Eleven's Blog","subtitle":null,"description":"Insist on learning some technology every day.","author":"Eleven","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2019-08-28T05:38:59.000Z","updated":"2019-08-28T05:39:59.284Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-08-28T05:35:05.000Z","updated":"2019-08-29T04:36:47.381Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"关于","date":"2019-08-28T09:25:25.000Z","updated":"2019-08-28T09:43:03.555Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"在校大学生记录学到的知识"}],"posts":[{"title":"LeetCode 56.合并区间","slug":"LeetCode-56-合并区间","date":"2019-09-16T07:44:05.000Z","updated":"2019-09-16T07:56:48.372Z","comments":true,"path":"2019/09/16/LeetCode-56-合并区间/","link":"","permalink":"http://yoursite.com/2019/09/16/LeetCode-56-合并区间/","excerpt":"","text":"‘’’ class Solution { public int[][] merge(int[][] intervals) { List&lt;int[]&gt; res = new ArrayList&lt;&gt;(); if(intervals.length == 0 || intervals == null) return res.toArray(new int[0][]); Arrays.sort(intervals, (a, b) -&gt; a[0] - b[0]); int start = intervals[0][0]; int end = intervals[0][1]; for(int[] interval:intervals){ if(interval[0] &lt;= end){ end = Math.max(end, interval[1]); }else{ res.add(new int[]{start, end}); start = interval[0]; end = interval[1]; } } res.add(new int[]{start, end}); return res.toArray(new int[0][]); } }‘’’ ###修改Arrays.sort ‘’’ class Solution { public int[][] merge(int[][] intervals) { List&lt;int[]&gt; res = new ArrayList&lt;&gt;(); if(intervals.length == 0 || intervals == null) return res.toArray(new int[0][]); Arrays.sort(intervals, new Comparator&lt;int[]&gt;() { @Override public int compare(int[] o1, int[] o2) { // TODO Auto-generated method stub return o1[0] - o2[0]; } }); int start = intervals[0][0]; int end = intervals[0][1]; for(int[] interval:intervals){ if(interval[0] &lt;= end){ end = Math.max(end, interval[1]); }else{ res.add(new int[]{start, end}); start = interval[0]; end = interval[1]; } } res.add(new int[]{start, end}); return res.toArray(new int[0][]); } }‘’’","categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/categories/LeetCode/"}],"tags":[]},{"title":"Java 反射：框架设计的灵魂","slug":"Java-反射","date":"2019-09-08T14:42:16.000Z","updated":"2019-09-09T05:44:31.543Z","comments":true,"path":"2019/09/08/Java-反射/","link":"","permalink":"http://yoursite.com/2019/09/08/Java-反射/","excerpt":"","text":"反射：框架设计的灵魂框架：半成品软件。可以在框架的基础上进行软件开发，简化编码。反射：将类的各个组件部分封装为其他对象好处：①可以在程序运行过程中，操作这些对象 ②可以解耦，提高程序的可扩展性 Java代码经历的三阶段：Source源代码阶段——&gt;Class类对象阶段——&gt;Runtime运行时阶段 获取Class对象的方法：1.Class.forName(“全类名”)：将字节码文件加载进内存，返回Class对象 * 多用于配置文件，将类名定义咋配置文件中。读取文件，加载类2.类名.class：通过类名的属性class获取 * 多用于参数的传递3.对象.getClass():getClass()方法在Object类中定义着。 * 多用于对象的获取字节码的方式 结论： 同一个字节码文件（*.class）在一次程序运行过程中，只会被加载一次，不论通过哪一种方法获取的Class对象都是同一个。 Class对象功能： * 获取功能： 1. 获取成员变量们 * Field[] getFields() ：获取所有public修饰的成员变量 * Field getField(String name) 获取指定名称的 public修饰的成员变量 * Field[] getDeclaredFields() 获取所有的成员变量，不考虑修饰符 * Field getDeclaredField(String name) 2. 获取构造方法们 * Constructor&lt;?&gt;[] getConstructors() * Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes) * Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes) * Constructor&lt;?&gt;[] getDeclaredConstructors() 3. 获取成员方法们： * Method[] getMethods() * Method getMethod(String name, 类&lt;?&gt;... parameterTypes) * Method[] getDeclaredMethods() * Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes) 4. 获取全类名 * String getName() * Field：成员变量 * 操作： 1. 设置值 * void set(Object obj, Object value) 2. 获取值 * get(Object obj) 3. 忽略访问权限修饰符的安全检查 * setAccessible(true):暴力反射 * Constructor:构造方法 * 创建对象： * T newInstance(Object... initargs) * 如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法 * Method：方法对象 * 执行方法： * Object invoke(Object obj, Object... args) * 获取方法名称： * String getName:获取方法名","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[]},{"title":"Java input and inputMismatchException","slug":"Java-input-and-inputMismatchException","date":"2019-09-04T04:27:43.000Z","updated":"2019-09-04T04:47:56.945Z","comments":true,"path":"2019/09/04/Java-input-and-inputMismatchException/","link":"","permalink":"http://yoursite.com/2019/09/04/Java-input-and-inputMismatchException/","excerpt":"","text":"Java从控制台输入常用方法之一：import java.util.Scanner;Scanner scan = new Scanner(System.in);int a = scan.nextInt();String b = scan.nextLine();float c = scan.nextFloat(); 出现inputMismatchException：说明可能输入值与变量声明的数据类型不符合","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[]},{"title":"git出现仓库间差异时，可以强推","slug":"git出现仓库间差异时，可以强推","date":"2019-09-03T00:41:06.000Z","updated":"2019-09-04T04:47:56.954Z","comments":true,"path":"2019/09/03/git出现仓库间差异时，可以强推/","link":"","permalink":"http://yoursite.com/2019/09/03/git出现仓库间差异时，可以强推/","excerpt":"","text":"git push -f origin master目前还不知道有什么弊端","categories":[{"name":"git","slug":"git","permalink":"http://yoursite.com/categories/git/"}],"tags":[]},{"title":"使用git将本地仓库推送到GitHub仓库","slug":"用git将本地仓库推送到GitHub仓库","date":"2019-08-29T04:08:29.000Z","updated":"2019-08-29T04:36:33.119Z","comments":true,"path":"2019/08/29/用git将本地仓库推送到GitHub仓库/","link":"","permalink":"http://yoursite.com/2019/08/29/用git将本地仓库推送到GitHub仓库/","excerpt":"","text":"创建本地仓库mkdir filenamecd filename 初始化仓库git init然后打开仓库所在的文件夹对文件进行操作 将文件推送本地仓库git status此时会列出带红色的文件名git add 文件名git commit -m &quot;描述&quot;git status提示nothing to commit, working tree clean说明已经没有文件在暂存区和工作区了 推送到远程仓库先到GitHub上创建一个新仓库,复制仓库地址git remote add origin 仓库地址git pull --rebase origin master这一步是为了本地仓库同步远程仓库的README.mdgit push -u origin master第一次推送 对文件修改后，再次推送到远程仓库git statusgit add filenamegit commit -m &quot;描述&quot;git statusgit push origin master推送成功","categories":[{"name":"git","slug":"git","permalink":"http://yoursite.com/categories/git/"}],"tags":[]},{"title":"搭建hexo，部署到GitHub仓库","slug":"搭建hexo，部署到GitHub仓库","date":"2019-08-27T13:48:10.000Z","updated":"2019-08-29T03:43:29.846Z","comments":true,"path":"2019/08/27/搭建hexo，部署到GitHub仓库/","link":"","permalink":"http://yoursite.com/2019/08/27/搭建hexo，部署到GitHub仓库/","excerpt":"","text":"首先下载node.js点击进入：https://nodejs.org/en/检查是否下载成功 接着安装hexo博客框架安装hexo博客框架，需要借助npm包管理器来安装，国内镜像安装比较慢，先用npm下载cnpm，就是淘宝源，利用淘宝源来安装加快下载速度。检查是否下载成功接下来利用cnpm安装hexo框架检查是否安装成功 初始化hexo博客查看路径创建一个新文件夹然后进入该路径初始化博客查看blog文件夹，是否下载成功启动博客在浏览器访问一下，访问成功，说明博客已经在本地成功搭建创建一篇博客，先关闭博客。查看路径下的文件对于博客内容，可以在文件夹里用typora打开编辑，然后保存刷新即可。接着清理生成再次启动博客刷新浏览器页面就可以看到你刚刚的那篇博文 将博客部署到远端，使别人能访问在blog目录下装一个git部署插件接下来对blog文件夹里的_config.yml进行添加说明，可以选择用文本打开，滚到最底部，将deploy下面的内容补上去，每一行开头前两个空格，冒号后面一个空格，repo是你仓库的地址。保存退出，接着部署到远端中间需要输入你GitHub的账户密码接下来就可以根据你的仓库名（name.github.io）访问你的博客了","categories":[],"tags":[]}]}